// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationClient interface {
	RegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	LoginUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	RetrieveToken(ctx context.Context, in *RetrieveTokenRequest, opts ...grpc.CallOption) (*RetrieveTokenResponse, error)
}

type authenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationClient(cc grpc.ClientConnInterface) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) RegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, "/main.Authentication/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) LoginUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/main.Authentication/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) RetrieveToken(ctx context.Context, in *RetrieveTokenRequest, opts ...grpc.CallOption) (*RetrieveTokenResponse, error) {
	out := new(RetrieveTokenResponse)
	err := c.cc.Invoke(ctx, "/main.Authentication/RetrieveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
// All implementations must embed UnimplementedAuthenticationServer
// for forward compatibility
type AuthenticationServer interface {
	RegisterUser(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	LoginUser(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	RetrieveToken(context.Context, *RetrieveTokenRequest) (*RetrieveTokenResponse, error)
	mustEmbedUnimplementedAuthenticationServer()
}

// UnimplementedAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (UnimplementedAuthenticationServer) RegisterUser(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAuthenticationServer) LoginUser(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedAuthenticationServer) RetrieveToken(context.Context, *RetrieveTokenRequest) (*RetrieveTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveToken not implemented")
}
func (UnimplementedAuthenticationServer) mustEmbedUnimplementedAuthenticationServer() {}

// UnsafeAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServer will
// result in compilation errors.
type UnsafeAuthenticationServer interface {
	mustEmbedUnimplementedAuthenticationServer()
}

func RegisterAuthenticationServer(s grpc.ServiceRegistrar, srv AuthenticationServer) {
	s.RegisterService(&Authentication_ServiceDesc, srv)
}

func _Authentication_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Authentication/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RegisterUser(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Authentication/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).LoginUser(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_RetrieveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).RetrieveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Authentication/RetrieveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).RetrieveToken(ctx, req.(*RetrieveTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authentication_ServiceDesc is the grpc.ServiceDesc for Authentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Authentication_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Authentication_LoginUser_Handler,
		},
		{
			MethodName: "RetrieveToken",
			Handler:    _Authentication_RetrieveToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/proto/api.proto",
}

// NewPhotosClient is the client API for NewPhotos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewPhotosClient interface {
	GetPhotos(ctx context.Context, in *GetPhotosRequest, opts ...grpc.CallOption) (NewPhotos_GetPhotosClient, error)
	GetVideos(ctx context.Context, in *GetVideosRequest, opts ...grpc.CallOption) (NewPhotos_GetVideosClient, error)
	UploadPhoto(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_UploadPhotoClient, error)
	UploadVideo(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_UploadVideoClient, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	GetUserinfo(ctx context.Context, in *GetUserinfoRequest, opts ...grpc.CallOption) (*GetUserinfoResponse, error)
	GetUserAvatar(ctx context.Context, in *GetUserAvatarRequest, opts ...grpc.CallOption) (*GetUserAvatarResponse, error)
	SetUserAvatar(ctx context.Context, in *SetUserAvatarRequest, opts ...grpc.CallOption) (*SetUserAvatarResponse, error)
	GetPhotosFromAlbum(ctx context.Context, in *GetPhotosFromAlbumRequest, opts ...grpc.CallOption) (NewPhotos_GetPhotosFromAlbumClient, error)
	GetVideosFromAlbum(ctx context.Context, in *GetVideosFromAlbumRequest, opts ...grpc.CallOption) (NewPhotos_GetVideosFromAlbumClient, error)
	GetAlbums(ctx context.Context, in *GetAlbumsRequest, opts ...grpc.CallOption) (NewPhotos_GetAlbumsClient, error)
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumResponse, error)
	DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error)
	UploadPhotoToAlbum(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_UploadPhotoToAlbumClient, error)
	UploadVideoToAlbum(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_UploadVideoToAlbumClient, error)
	DeletePhotoFromAlbum(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_DeletePhotoFromAlbumClient, error)
	DeleteVideoFromAlbum(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_DeleteVideoFromAlbumClient, error)
	GetAlbumInfo(ctx context.Context, in *GetAlbumInfoRequest, opts ...grpc.CallOption) (*GetAlbumInfoResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetFullPhotoByThumbnail(ctx context.Context, in *GetFullPhotoByThumbnailRequest, opts ...grpc.CallOption) (*GetFullPhotoByThumbnailResponse, error)
}

type newPhotosClient struct {
	cc grpc.ClientConnInterface
}

func NewNewPhotosClient(cc grpc.ClientConnInterface) NewPhotosClient {
	return &newPhotosClient{cc}
}

func (c *newPhotosClient) GetPhotos(ctx context.Context, in *GetPhotosRequest, opts ...grpc.CallOption) (NewPhotos_GetPhotosClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[0], "/main.NewPhotos/GetPhotos", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosGetPhotosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewPhotos_GetPhotosClient interface {
	Recv() (*GetPhotosResponse, error)
	grpc.ClientStream
}

type newPhotosGetPhotosClient struct {
	grpc.ClientStream
}

func (x *newPhotosGetPhotosClient) Recv() (*GetPhotosResponse, error) {
	m := new(GetPhotosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) GetVideos(ctx context.Context, in *GetVideosRequest, opts ...grpc.CallOption) (NewPhotos_GetVideosClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[1], "/main.NewPhotos/GetVideos", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosGetVideosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewPhotos_GetVideosClient interface {
	Recv() (*GetVideosResponse, error)
	grpc.ClientStream
}

type newPhotosGetVideosClient struct {
	grpc.ClientStream
}

func (x *newPhotosGetVideosClient) Recv() (*GetVideosResponse, error) {
	m := new(GetVideosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) UploadPhoto(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_UploadPhotoClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[2], "/main.NewPhotos/UploadPhoto", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosUploadPhotoClient{stream}
	return x, nil
}

type NewPhotos_UploadPhotoClient interface {
	Send(*UploadPhotoRequest) error
	CloseAndRecv() (*UploadPhotoResponse, error)
	grpc.ClientStream
}

type newPhotosUploadPhotoClient struct {
	grpc.ClientStream
}

func (x *newPhotosUploadPhotoClient) Send(m *UploadPhotoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newPhotosUploadPhotoClient) CloseAndRecv() (*UploadPhotoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPhotoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) UploadVideo(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_UploadVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[3], "/main.NewPhotos/UploadVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosUploadVideoClient{stream}
	return x, nil
}

type NewPhotos_UploadVideoClient interface {
	Send(*UploadVideoRequest) error
	CloseAndRecv() (*UploadVideoResponse, error)
	grpc.ClientStream
}

type newPhotosUploadVideoClient struct {
	grpc.ClientStream
}

func (x *newPhotosUploadVideoClient) Send(m *UploadVideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newPhotosUploadVideoClient) CloseAndRecv() (*UploadVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPhotosClient) GetUserinfo(ctx context.Context, in *GetUserinfoRequest, opts ...grpc.CallOption) (*GetUserinfoResponse, error) {
	out := new(GetUserinfoResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/GetUserinfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPhotosClient) GetUserAvatar(ctx context.Context, in *GetUserAvatarRequest, opts ...grpc.CallOption) (*GetUserAvatarResponse, error) {
	out := new(GetUserAvatarResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/GetUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPhotosClient) SetUserAvatar(ctx context.Context, in *SetUserAvatarRequest, opts ...grpc.CallOption) (*SetUserAvatarResponse, error) {
	out := new(SetUserAvatarResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/SetUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPhotosClient) GetPhotosFromAlbum(ctx context.Context, in *GetPhotosFromAlbumRequest, opts ...grpc.CallOption) (NewPhotos_GetPhotosFromAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[4], "/main.NewPhotos/GetPhotosFromAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosGetPhotosFromAlbumClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewPhotos_GetPhotosFromAlbumClient interface {
	Recv() (*GetPhotosFromAlbumResponse, error)
	grpc.ClientStream
}

type newPhotosGetPhotosFromAlbumClient struct {
	grpc.ClientStream
}

func (x *newPhotosGetPhotosFromAlbumClient) Recv() (*GetPhotosFromAlbumResponse, error) {
	m := new(GetPhotosFromAlbumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) GetVideosFromAlbum(ctx context.Context, in *GetVideosFromAlbumRequest, opts ...grpc.CallOption) (NewPhotos_GetVideosFromAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[5], "/main.NewPhotos/GetVideosFromAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosGetVideosFromAlbumClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewPhotos_GetVideosFromAlbumClient interface {
	Recv() (*GetVideosFromAlbumResponse, error)
	grpc.ClientStream
}

type newPhotosGetVideosFromAlbumClient struct {
	grpc.ClientStream
}

func (x *newPhotosGetVideosFromAlbumClient) Recv() (*GetVideosFromAlbumResponse, error) {
	m := new(GetVideosFromAlbumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) GetAlbums(ctx context.Context, in *GetAlbumsRequest, opts ...grpc.CallOption) (NewPhotos_GetAlbumsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[6], "/main.NewPhotos/GetAlbums", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosGetAlbumsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewPhotos_GetAlbumsClient interface {
	Recv() (*GetAlbumsResponse, error)
	grpc.ClientStream
}

type newPhotosGetAlbumsClient struct {
	grpc.ClientStream
}

func (x *newPhotosGetAlbumsClient) Recv() (*GetAlbumsResponse, error) {
	m := new(GetAlbumsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumResponse, error) {
	out := new(CreateAlbumResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPhotosClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error) {
	out := new(DeleteAlbumResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/DeleteAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPhotosClient) UploadPhotoToAlbum(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_UploadPhotoToAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[7], "/main.NewPhotos/UploadPhotoToAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosUploadPhotoToAlbumClient{stream}
	return x, nil
}

type NewPhotos_UploadPhotoToAlbumClient interface {
	Send(*UploadPhotoToAlbumRequest) error
	CloseAndRecv() (*UploadPhotoToAlbumResponse, error)
	grpc.ClientStream
}

type newPhotosUploadPhotoToAlbumClient struct {
	grpc.ClientStream
}

func (x *newPhotosUploadPhotoToAlbumClient) Send(m *UploadPhotoToAlbumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newPhotosUploadPhotoToAlbumClient) CloseAndRecv() (*UploadPhotoToAlbumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPhotoToAlbumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) UploadVideoToAlbum(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_UploadVideoToAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[8], "/main.NewPhotos/UploadVideoToAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosUploadVideoToAlbumClient{stream}
	return x, nil
}

type NewPhotos_UploadVideoToAlbumClient interface {
	Send(*UploadVideoToAlbumRequest) error
	CloseAndRecv() (*UploadVideoToAlbumResponse, error)
	grpc.ClientStream
}

type newPhotosUploadVideoToAlbumClient struct {
	grpc.ClientStream
}

func (x *newPhotosUploadVideoToAlbumClient) Send(m *UploadVideoToAlbumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newPhotosUploadVideoToAlbumClient) CloseAndRecv() (*UploadVideoToAlbumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadVideoToAlbumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) DeletePhotoFromAlbum(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_DeletePhotoFromAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[9], "/main.NewPhotos/DeletePhotoFromAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosDeletePhotoFromAlbumClient{stream}
	return x, nil
}

type NewPhotos_DeletePhotoFromAlbumClient interface {
	Send(*DeletePhotoFromAlbumRequest) error
	CloseAndRecv() (*DeletePhotoFromAlbumResponse, error)
	grpc.ClientStream
}

type newPhotosDeletePhotoFromAlbumClient struct {
	grpc.ClientStream
}

func (x *newPhotosDeletePhotoFromAlbumClient) Send(m *DeletePhotoFromAlbumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newPhotosDeletePhotoFromAlbumClient) CloseAndRecv() (*DeletePhotoFromAlbumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeletePhotoFromAlbumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) DeleteVideoFromAlbum(ctx context.Context, opts ...grpc.CallOption) (NewPhotos_DeleteVideoFromAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewPhotos_ServiceDesc.Streams[10], "/main.NewPhotos/DeleteVideoFromAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &newPhotosDeleteVideoFromAlbumClient{stream}
	return x, nil
}

type NewPhotos_DeleteVideoFromAlbumClient interface {
	Send(*DeleteVideoFromAlbumRequest) error
	CloseAndRecv() (*DeleteVideoFromAlbumResponse, error)
	grpc.ClientStream
}

type newPhotosDeleteVideoFromAlbumClient struct {
	grpc.ClientStream
}

func (x *newPhotosDeleteVideoFromAlbumClient) Send(m *DeleteVideoFromAlbumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newPhotosDeleteVideoFromAlbumClient) CloseAndRecv() (*DeleteVideoFromAlbumResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteVideoFromAlbumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newPhotosClient) GetAlbumInfo(ctx context.Context, in *GetAlbumInfoRequest, opts ...grpc.CallOption) (*GetAlbumInfoResponse, error) {
	out := new(GetAlbumInfoResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/GetAlbumInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPhotosClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPhotosClient) GetFullPhotoByThumbnail(ctx context.Context, in *GetFullPhotoByThumbnailRequest, opts ...grpc.CallOption) (*GetFullPhotoByThumbnailResponse, error) {
	out := new(GetFullPhotoByThumbnailResponse)
	err := c.cc.Invoke(ctx, "/main.NewPhotos/GetFullPhotoByThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewPhotosServer is the server API for NewPhotos service.
// All implementations must embed UnimplementedNewPhotosServer
// for forward compatibility
type NewPhotosServer interface {
	GetPhotos(*GetPhotosRequest, NewPhotos_GetPhotosServer) error
	GetVideos(*GetVideosRequest, NewPhotos_GetVideosServer) error
	UploadPhoto(NewPhotos_UploadPhotoServer) error
	UploadVideo(NewPhotos_UploadVideoServer) error
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	GetUserinfo(context.Context, *GetUserinfoRequest) (*GetUserinfoResponse, error)
	GetUserAvatar(context.Context, *GetUserAvatarRequest) (*GetUserAvatarResponse, error)
	SetUserAvatar(context.Context, *SetUserAvatarRequest) (*SetUserAvatarResponse, error)
	GetPhotosFromAlbum(*GetPhotosFromAlbumRequest, NewPhotos_GetPhotosFromAlbumServer) error
	GetVideosFromAlbum(*GetVideosFromAlbumRequest, NewPhotos_GetVideosFromAlbumServer) error
	GetAlbums(*GetAlbumsRequest, NewPhotos_GetAlbumsServer) error
	CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumResponse, error)
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error)
	UploadPhotoToAlbum(NewPhotos_UploadPhotoToAlbumServer) error
	UploadVideoToAlbum(NewPhotos_UploadVideoToAlbumServer) error
	DeletePhotoFromAlbum(NewPhotos_DeletePhotoFromAlbumServer) error
	DeleteVideoFromAlbum(NewPhotos_DeleteVideoFromAlbumServer) error
	GetAlbumInfo(context.Context, *GetAlbumInfoRequest) (*GetAlbumInfoResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetFullPhotoByThumbnail(context.Context, *GetFullPhotoByThumbnailRequest) (*GetFullPhotoByThumbnailResponse, error)
	mustEmbedUnimplementedNewPhotosServer()
}

// UnimplementedNewPhotosServer must be embedded to have forward compatible implementations.
type UnimplementedNewPhotosServer struct {
}

func (UnimplementedNewPhotosServer) GetPhotos(*GetPhotosRequest, NewPhotos_GetPhotosServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPhotos not implemented")
}
func (UnimplementedNewPhotosServer) GetVideos(*GetVideosRequest, NewPhotos_GetVideosServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideos not implemented")
}
func (UnimplementedNewPhotosServer) UploadPhoto(NewPhotos_UploadPhotoServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPhoto not implemented")
}
func (UnimplementedNewPhotosServer) UploadVideo(NewPhotos_UploadVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedNewPhotosServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedNewPhotosServer) GetUserinfo(context.Context, *GetUserinfoRequest) (*GetUserinfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserinfo not implemented")
}
func (UnimplementedNewPhotosServer) GetUserAvatar(context.Context, *GetUserAvatarRequest) (*GetUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAvatar not implemented")
}
func (UnimplementedNewPhotosServer) SetUserAvatar(context.Context, *SetUserAvatarRequest) (*SetUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserAvatar not implemented")
}
func (UnimplementedNewPhotosServer) GetPhotosFromAlbum(*GetPhotosFromAlbumRequest, NewPhotos_GetPhotosFromAlbumServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPhotosFromAlbum not implemented")
}
func (UnimplementedNewPhotosServer) GetVideosFromAlbum(*GetVideosFromAlbumRequest, NewPhotos_GetVideosFromAlbumServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideosFromAlbum not implemented")
}
func (UnimplementedNewPhotosServer) GetAlbums(*GetAlbumsRequest, NewPhotos_GetAlbumsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAlbums not implemented")
}
func (UnimplementedNewPhotosServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedNewPhotosServer) DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedNewPhotosServer) UploadPhotoToAlbum(NewPhotos_UploadPhotoToAlbumServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPhotoToAlbum not implemented")
}
func (UnimplementedNewPhotosServer) UploadVideoToAlbum(NewPhotos_UploadVideoToAlbumServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadVideoToAlbum not implemented")
}
func (UnimplementedNewPhotosServer) DeletePhotoFromAlbum(NewPhotos_DeletePhotoFromAlbumServer) error {
	return status.Errorf(codes.Unimplemented, "method DeletePhotoFromAlbum not implemented")
}
func (UnimplementedNewPhotosServer) DeleteVideoFromAlbum(NewPhotos_DeleteVideoFromAlbumServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteVideoFromAlbum not implemented")
}
func (UnimplementedNewPhotosServer) GetAlbumInfo(context.Context, *GetAlbumInfoRequest) (*GetAlbumInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumInfo not implemented")
}
func (UnimplementedNewPhotosServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNewPhotosServer) GetFullPhotoByThumbnail(context.Context, *GetFullPhotoByThumbnailRequest) (*GetFullPhotoByThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullPhotoByThumbnail not implemented")
}
func (UnimplementedNewPhotosServer) mustEmbedUnimplementedNewPhotosServer() {}

// UnsafeNewPhotosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewPhotosServer will
// result in compilation errors.
type UnsafeNewPhotosServer interface {
	mustEmbedUnimplementedNewPhotosServer()
}

func RegisterNewPhotosServer(s grpc.ServiceRegistrar, srv NewPhotosServer) {
	s.RegisterService(&NewPhotos_ServiceDesc, srv)
}

func _NewPhotos_GetPhotos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPhotosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewPhotosServer).GetPhotos(m, &newPhotosGetPhotosServer{stream})
}

type NewPhotos_GetPhotosServer interface {
	Send(*GetPhotosResponse) error
	grpc.ServerStream
}

type newPhotosGetPhotosServer struct {
	grpc.ServerStream
}

func (x *newPhotosGetPhotosServer) Send(m *GetPhotosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NewPhotos_GetVideos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVideosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewPhotosServer).GetVideos(m, &newPhotosGetVideosServer{stream})
}

type NewPhotos_GetVideosServer interface {
	Send(*GetVideosResponse) error
	grpc.ServerStream
}

type newPhotosGetVideosServer struct {
	grpc.ServerStream
}

func (x *newPhotosGetVideosServer) Send(m *GetVideosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NewPhotos_UploadPhoto_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewPhotosServer).UploadPhoto(&newPhotosUploadPhotoServer{stream})
}

type NewPhotos_UploadPhotoServer interface {
	SendAndClose(*UploadPhotoResponse) error
	Recv() (*UploadPhotoRequest, error)
	grpc.ServerStream
}

type newPhotosUploadPhotoServer struct {
	grpc.ServerStream
}

func (x *newPhotosUploadPhotoServer) SendAndClose(m *UploadPhotoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newPhotosUploadPhotoServer) Recv() (*UploadPhotoRequest, error) {
	m := new(UploadPhotoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NewPhotos_UploadVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewPhotosServer).UploadVideo(&newPhotosUploadVideoServer{stream})
}

type NewPhotos_UploadVideoServer interface {
	SendAndClose(*UploadVideoResponse) error
	Recv() (*UploadVideoRequest, error)
	grpc.ServerStream
}

type newPhotosUploadVideoServer struct {
	grpc.ServerStream
}

func (x *newPhotosUploadVideoServer) SendAndClose(m *UploadVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newPhotosUploadVideoServer) Recv() (*UploadVideoRequest, error) {
	m := new(UploadVideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NewPhotos_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPhotos_GetUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserinfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).GetUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/GetUserinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).GetUserinfo(ctx, req.(*GetUserinfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPhotos_GetUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).GetUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/GetUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).GetUserAvatar(ctx, req.(*GetUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPhotos_SetUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).SetUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/SetUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).SetUserAvatar(ctx, req.(*SetUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPhotos_GetPhotosFromAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPhotosFromAlbumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewPhotosServer).GetPhotosFromAlbum(m, &newPhotosGetPhotosFromAlbumServer{stream})
}

type NewPhotos_GetPhotosFromAlbumServer interface {
	Send(*GetPhotosFromAlbumResponse) error
	grpc.ServerStream
}

type newPhotosGetPhotosFromAlbumServer struct {
	grpc.ServerStream
}

func (x *newPhotosGetPhotosFromAlbumServer) Send(m *GetPhotosFromAlbumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NewPhotos_GetVideosFromAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVideosFromAlbumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewPhotosServer).GetVideosFromAlbum(m, &newPhotosGetVideosFromAlbumServer{stream})
}

type NewPhotos_GetVideosFromAlbumServer interface {
	Send(*GetVideosFromAlbumResponse) error
	grpc.ServerStream
}

type newPhotosGetVideosFromAlbumServer struct {
	grpc.ServerStream
}

func (x *newPhotosGetVideosFromAlbumServer) Send(m *GetVideosFromAlbumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NewPhotos_GetAlbums_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAlbumsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewPhotosServer).GetAlbums(m, &newPhotosGetAlbumsServer{stream})
}

type NewPhotos_GetAlbumsServer interface {
	Send(*GetAlbumsResponse) error
	grpc.ServerStream
}

type newPhotosGetAlbumsServer struct {
	grpc.ServerStream
}

func (x *newPhotosGetAlbumsServer) Send(m *GetAlbumsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NewPhotos_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPhotos_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPhotos_UploadPhotoToAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewPhotosServer).UploadPhotoToAlbum(&newPhotosUploadPhotoToAlbumServer{stream})
}

type NewPhotos_UploadPhotoToAlbumServer interface {
	SendAndClose(*UploadPhotoToAlbumResponse) error
	Recv() (*UploadPhotoToAlbumRequest, error)
	grpc.ServerStream
}

type newPhotosUploadPhotoToAlbumServer struct {
	grpc.ServerStream
}

func (x *newPhotosUploadPhotoToAlbumServer) SendAndClose(m *UploadPhotoToAlbumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newPhotosUploadPhotoToAlbumServer) Recv() (*UploadPhotoToAlbumRequest, error) {
	m := new(UploadPhotoToAlbumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NewPhotos_UploadVideoToAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewPhotosServer).UploadVideoToAlbum(&newPhotosUploadVideoToAlbumServer{stream})
}

type NewPhotos_UploadVideoToAlbumServer interface {
	SendAndClose(*UploadVideoToAlbumResponse) error
	Recv() (*UploadVideoToAlbumRequest, error)
	grpc.ServerStream
}

type newPhotosUploadVideoToAlbumServer struct {
	grpc.ServerStream
}

func (x *newPhotosUploadVideoToAlbumServer) SendAndClose(m *UploadVideoToAlbumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newPhotosUploadVideoToAlbumServer) Recv() (*UploadVideoToAlbumRequest, error) {
	m := new(UploadVideoToAlbumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NewPhotos_DeletePhotoFromAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewPhotosServer).DeletePhotoFromAlbum(&newPhotosDeletePhotoFromAlbumServer{stream})
}

type NewPhotos_DeletePhotoFromAlbumServer interface {
	SendAndClose(*DeletePhotoFromAlbumResponse) error
	Recv() (*DeletePhotoFromAlbumRequest, error)
	grpc.ServerStream
}

type newPhotosDeletePhotoFromAlbumServer struct {
	grpc.ServerStream
}

func (x *newPhotosDeletePhotoFromAlbumServer) SendAndClose(m *DeletePhotoFromAlbumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newPhotosDeletePhotoFromAlbumServer) Recv() (*DeletePhotoFromAlbumRequest, error) {
	m := new(DeletePhotoFromAlbumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NewPhotos_DeleteVideoFromAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewPhotosServer).DeleteVideoFromAlbum(&newPhotosDeleteVideoFromAlbumServer{stream})
}

type NewPhotos_DeleteVideoFromAlbumServer interface {
	SendAndClose(*DeleteVideoFromAlbumResponse) error
	Recv() (*DeleteVideoFromAlbumRequest, error)
	grpc.ServerStream
}

type newPhotosDeleteVideoFromAlbumServer struct {
	grpc.ServerStream
}

func (x *newPhotosDeleteVideoFromAlbumServer) SendAndClose(m *DeleteVideoFromAlbumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newPhotosDeleteVideoFromAlbumServer) Recv() (*DeleteVideoFromAlbumRequest, error) {
	m := new(DeleteVideoFromAlbumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NewPhotos_GetAlbumInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).GetAlbumInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/GetAlbumInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).GetAlbumInfo(ctx, req.(*GetAlbumInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPhotos_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPhotos_GetFullPhotoByThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullPhotoByThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPhotosServer).GetFullPhotoByThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.NewPhotos/GetFullPhotoByThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPhotosServer).GetFullPhotoByThumbnail(ctx, req.(*GetFullPhotoByThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewPhotos_ServiceDesc is the grpc.ServiceDesc for NewPhotos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewPhotos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.NewPhotos",
	HandlerType: (*NewPhotosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteAccount",
			Handler:    _NewPhotos_DeleteAccount_Handler,
		},
		{
			MethodName: "GetUserinfo",
			Handler:    _NewPhotos_GetUserinfo_Handler,
		},
		{
			MethodName: "GetUserAvatar",
			Handler:    _NewPhotos_GetUserAvatar_Handler,
		},
		{
			MethodName: "SetUserAvatar",
			Handler:    _NewPhotos_SetUserAvatar_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _NewPhotos_CreateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _NewPhotos_DeleteAlbum_Handler,
		},
		{
			MethodName: "GetAlbumInfo",
			Handler:    _NewPhotos_GetAlbumInfo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _NewPhotos_Ping_Handler,
		},
		{
			MethodName: "GetFullPhotoByThumbnail",
			Handler:    _NewPhotos_GetFullPhotoByThumbnail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPhotos",
			Handler:       _NewPhotos_GetPhotos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVideos",
			Handler:       _NewPhotos_GetVideos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadPhoto",
			Handler:       _NewPhotos_UploadPhoto_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadVideo",
			Handler:       _NewPhotos_UploadVideo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPhotosFromAlbum",
			Handler:       _NewPhotos_GetPhotosFromAlbum_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVideosFromAlbum",
			Handler:       _NewPhotos_GetVideosFromAlbum_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAlbums",
			Handler:       _NewPhotos_GetAlbums_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadPhotoToAlbum",
			Handler:       _NewPhotos_UploadPhotoToAlbum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadVideoToAlbum",
			Handler:       _NewPhotos_UploadVideoToAlbum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeletePhotoFromAlbum",
			Handler:       _NewPhotos_DeletePhotoFromAlbum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteVideoFromAlbum",
			Handler:       _NewPhotos_DeleteVideoFromAlbum_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "logic/proto/api.proto",
}

// TagClient is the client API for Tag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagClient interface {
	RecognizeObject(ctx context.Context, in *RecognizeObjectRequest, opts ...grpc.CallOption) (*RecognizeObjectResponse, error)
}

type tagClient struct {
	cc grpc.ClientConnInterface
}

func NewTagClient(cc grpc.ClientConnInterface) TagClient {
	return &tagClient{cc}
}

func (c *tagClient) RecognizeObject(ctx context.Context, in *RecognizeObjectRequest, opts ...grpc.CallOption) (*RecognizeObjectResponse, error) {
	out := new(RecognizeObjectResponse)
	err := c.cc.Invoke(ctx, "/main.Tag/RecognizeObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServer is the server API for Tag service.
// All implementations must embed UnimplementedTagServer
// for forward compatibility
type TagServer interface {
	RecognizeObject(context.Context, *RecognizeObjectRequest) (*RecognizeObjectResponse, error)
	mustEmbedUnimplementedTagServer()
}

// UnimplementedTagServer must be embedded to have forward compatible implementations.
type UnimplementedTagServer struct {
}

func (UnimplementedTagServer) RecognizeObject(context.Context, *RecognizeObjectRequest) (*RecognizeObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeObject not implemented")
}
func (UnimplementedTagServer) mustEmbedUnimplementedTagServer() {}

// UnsafeTagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServer will
// result in compilation errors.
type UnsafeTagServer interface {
	mustEmbedUnimplementedTagServer()
}

func RegisterTagServer(s grpc.ServiceRegistrar, srv TagServer) {
	s.RegisterService(&Tag_ServiceDesc, srv)
}

func _Tag_RecognizeObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).RecognizeObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tag/RecognizeObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).RecognizeObject(ctx, req.(*RecognizeObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tag_ServiceDesc is the grpc.ServiceDesc for Tag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Tag",
	HandlerType: (*TagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeObject",
			Handler:    _Tag_RecognizeObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/proto/api.proto",
}
